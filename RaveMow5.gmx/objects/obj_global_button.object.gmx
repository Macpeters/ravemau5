<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_btn_play</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
self.buttonLevel = 1;
spawnX = x;
spawnY = y;
canToggle = true;
toggleCount = 0;
toggleMax = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Count delay to avoid double clicks
if((canToggle == false) &amp;&amp; (toggleCount &lt; toggleMax)){
    toggleCount += 1;
}else if(canToggle == false){
    canToggle = true;
    toggleCount = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to level select, store, or back
{ switch (buttonWorld) {
   case global.BUTTON_SHOPPE:
        room_goto(roo_store);
        break;
   case global.BUTTON_PLAY:
        room_goto(roo_world_select);
        break;
   case global.BUTTON_SETTINGS:
        room_goto(roo_settings);
        break;
   case global.BUTTON_SFX:
        if(canToggle){
            global.sfx_on = !global.sfx_on;
            canToggle = false;
        }
       break;
   case global.BUTTON_MUSIC:
        if(canToggle){
            global.music_on = !global.music_on;
            canToggle = false;
        }
        break;
   case global.WORLD_ICE:
   case global.WORLD_SEWER:
   case global.WORLD_PARLOUR:
   case global.WORLD_DISCO: 
        global.world = buttonWorld;
        room_goto(roo_cutscene);
    break;
   default:
           room_goto(roo_world_select);
           break;
   }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the right sprite for this world

//Get the sprite
opacity = 1;
get_global_btn_sprite(self.buttonWorld);

//Toggle opacity depending on settings
{ switch (buttonType) {
   case global.BUTTON_SFX:
    if(!global.sfx_on){
        opacity = 0.5;   
    }
   break;
   case global.BUTTON_MUSIC:
    if(!global.music_on){
        opacity = 0.5;   
    }
   break;
   default:
   }
}

draw_sprite_ext( sprite, 1, x, y, 1.5, 1.5, 0, c_white, opacity );



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
