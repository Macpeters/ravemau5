<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
max_health = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keys Pressed
var key_right = keyboard_check(vk_right);
var key_left = -keyboard_check(vk_left);
    //is it being pressed, but was not pressed in the last step
var key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;

//max vsp
if(vsp &lt; 10){
    vsp += grav;    
}
//Keep Player in room
if(x &gt; room_width + 16){
    x = room_width + 16;
}else if(x &lt; -16){
    x = -16
}

//jumping
var onWall = place_meeting(x, y + 1, obj_wall)
var onPlatform = place_meeting(x, y + 1, obj_platform)
if(onWall){
    vsp = key_jump * -jumpspeed;
}

//Horizontal Collision
if(place_meeting(x + hsp, y, obj_wall)){
    while(!place_meeting(x+sign(hsp), y, obj_wall)){
        x += sign(hsp);
    }
    hsp = 0;
}

//Vertical Collision
    //Walls
if(place_meeting(x, y  + vsp, obj_wall)){
    while(!place_meeting(x, y + sign(vsp), obj_wall)){
        y += sign(vsp);
    }
    vsp = 0;
}

    //Jumpthrough Platforms
var platformBelow, platformCollide, playerIsAbovePlatform;
platformBelow   = collision_line(bbox_left + 5, bbox_bottom + 1, bbox_right - 1, bbox_bottom + 5, obj_platform, true, false);
platformCollide = instance_place(x, y, platformBelow);
if(place_meeting(x, y + 1, obj_platform) || (platformBelow &amp;&amp; (platformCollide != platformBelow))){
   playerIsAbovePlatform = true;
   if(vsp &gt; 0){
    vsp = key_jump * -jumpspeed;
   }
}

//apply the relevant values to the object
x += hsp;
y += vsp;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Horizontal Collision
/*
if(place_meeting(x + hsp, y, obj_beetle)){

}

if(place_meeting(x, y + vsp , obj_platform)){
    if(self.y + vsp + 16 &lt; other.y){
        alert = instance_create(other.x, other.y, obj_killAlert);
        alert.enemySprite = spr_beetle;
        global.points += 50;
        with(other){
            instance_destroy();
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sewerWater">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health -= 1;
if(instance_number(obj_sickAlert) &lt; 1){
    instance_create(self.x, self.y, obj_sickAlert);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_glowRing">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.glowRings += 1;
global.points += 5;
with(other){
    instance_destroy();
};
instance_create(self.x, self.y, obj_glowRingAlert);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cheese">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health += 20;
global.points += 5;
instance_create(self.x, self.y, obj_healthAlert);
if(health &gt; max_health){
    health = max_health;
}
global.points += 5;
with(other){
    instance_destroy();
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_beetle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Horizontal Collision
if(place_meeting(x + hsp, y, obj_beetle)){
    health -= 1;
    if(instance_number(obj_sickAlert) &lt; 1){
        instance_create(self.x, self.y, obj_sickAlert);
    }
}

if(place_meeting(x, y + vsp , obj_beetle)){
    if(self.y + vsp + 16 &lt; other.y){
        alert = instance_create(other.x, other.y, obj_killAlert);
        alert.enemySprite = spr_beetle;
        global.points += 50;
        global.beetleBaddies += 1;
        with(other){
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
